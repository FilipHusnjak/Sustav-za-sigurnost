;;-----------------------------------------------------------------------------------------
;;	FRISC-PYNQ-SYSTEM
;;	
;;	Sve informacije o nacinima spajanja i definicijama ulazno/izlaznih jedinica mozete 
;;	procitati u dokumentu:
;;		/PYNQ-LAB-STARTER/docs/PYNQ-FRISC-SYSTEM.pdf
;;
;;	Sve informacije o programiranju i konfiguriranju PYNQ plocice mozete procitati u dokumentu:
;;		/PYNQ-LAB-STARTER/docs/Upute-za-programiranje.pdf
;;
;;	Ovaj predlozak ima predefinirani skup memorijskih adresa UI jedinica.
;;	UI jedinice koje su postavljene u sustavu:
;; 		- 4 ledice i 2 RGB ledice
;;		- 4 dugmica i 2 prekidaca
;;		- 2 x 8bit GPIO (jedan ulazni i jedan izlazni)
;; 		- 2 x UART kontrolera (za bluetooth ili seriju)
;; 		- Kontroler za I2C
;;		- Kontroler za SPI
;;		- 12-bitni A/D pretvornik
;;
;;	Za sva pitanja mozete se obratiti na:
;;		alen.duspara@fer.hr
;;		tomislav.bicanic@fer.hr
;;		marko.pacadi@fer.hr
;; 		luka.macan@fer.hr
;;
;;-----------------------------------------------------------------------------------------

;; Adrese ulazno/izlaznih jedinica	
GPIO0_LEDICE    EQU	0FFF80000
GPIO0_RGB 	    EQU	0FFF80008

GPIO1_SWITCHES  EQU	0FFF81000
GPIO1_BUTTONS   EQU	0FFF81008
GPIO1_ISR	    EQU	0FFF81120
GPIO1_GIER	    EQU	0FFF8111C
GPIO1_IER	    EQU	0FFF81128

GPIO2_INPUT		EQU	0FFF82000
GPIO2_OUTPUT	EQU	0FFF82008
GPIO2_ISR	    EQU	0FFF82120
GPIO2_GIER	    EQU	0FFF8211C
GPIO2_IER	    EQU	0FFF82128

UART0_RX	    EQU 0FFF83000
UART0_TX	    EQU 0FFF83004
UART0_STAT	    EQU 0FFF83008
UART0_CTRL	    EQU 0FFF8300C

UART1_RX	    EQU 0FFF84000
UART1_TX	    EQU 0FFF84004
UART1_STAT	    EQU 0FFF84008
UART1_CTRL	    EQU 0FFF8400C

I2C_GIE			EQU 0FFF8501C 	; I2C global interrupt enable register
I2C_ISR			EQU 0FFF85020 	; I2C interrupt status register
I2C_IER			EQU 0FFF85028 	; I2C interrupt enable register
I2C_CR			EQU 0FFF85100 	; I2C control register
I2C_SR			EQU 0FFF85104 	; I2C status register
I2C_TX_FIFO		EQU 0FFF85108 	; I2C transmit FIFO
I2C_RX_FIFO	 	EQU 0FFF8510C 	; I2C recieve FIFO
I2C_SA			EQU 0FFF85110 	; I2C slave adress register (adresa na kojoj ce se odazivati - slave mode)
I2C_TX_FIFO_OCY EQU 0FFF85114 	; I2C transmit FIFO occupancy 0 = 1 podatak, 1 = 2 podatka...
I2C_RX_FIFO_OCY	EQU 0FFF85118 	; I2C recieve FIFO occupancy 0 = 1 podatak, 1 = 2 podatka...
I2C_RX_FIFO_PIR	EQU 0FFF85120 	; I2C RX FIFO - nakon koliko podataka ce se napraviti interrupt, ondosno max velicina RX_FIFO-a

SPI_CR			EQU 0FFF86060 	; SPI control register
SPI_SR			EQU 0FFF86064 	; SPI status register
SPI_DTR			EQU 0FFF86068 	; SPI data transmit register
SPI_DRR			EQU 0FFF8606C 	; SPI data receive register
SPI_SSR			EQU 0FFF86070 	; SPI Slave select register
SPI_GIER		EQU 0FFF8601C 	; SPI global interrupt enable register
SPI_IER			EQU 0FFF86028 	; SPI interrupt enable register
SPI_ISR			EQU 0FFF86020 	; SPI interrupt status register

TIMER0_CSR		EQU	0FFF87000 	; Timer 0 Control and Status Register
TIMER0_LR		EQU	0FFF87004 	; Timer 0 Load Register
TIMER0_CR		EQU	0FFF87008 	; Timer 0 Counter Register
TIMER1_CSR		EQU	0FFF87010 	; Timer 1 Control and Status Register
TIMER1_LR		EQU	0FFF87014 	; Timer 1 Load Register
TIMER1_CR		EQU	0FFF87018 	; Timer 1 Counter Register

INTC_NMI_ISR	EQU 0FFF88000   ; Interrupt status register
INTC_NMI_IAR	EQU 0FFF8800C   ; Interrupt aknowledge register
INTC_NMI_SIE	EQU 0FFF88010   ; Set interrupt enable
INTC_NMI_CIE	EQU 0FFF88014   ; Clear interrupt enable
INTC_NMI_MER	EQU 0FFF8801C   ; Master enable register

INTC_MI_ISR		EQU 0FFF89000	; Interrupt status register
INTC_MI_IAR		EQU 0FFF8900C	; Interrupt aknowledge register
INTC_MI_SIE		EQU 0FFF89010	; Set interrupt enable
INTC_MI_CIE		EQU 0FFF89014	; Clear interrupt enable
INTC_MI_MER		EQU 0FFF8901C	; Master enable register

ADC_A0			EQU	0FFF8A244	; Vrijednost A/D pretvorbe na ulazu A0


; ######### PROGRAMSKI KOD ZA "SUSTAV ZA SIGURNOST" #################
; 
; NAPISALI: filip.husnjak@fer.hr
;			luka.mesaric@fer.hr
;
; ###################################################################

				ORG 0
MAIN			MOVE 10000, SP	; inicijalizacija SP
				JR MAIN_DUMMY	; skok u glavni program


; MASKIRAJUCI PREKIDNI VEKTOR ###################

				ORG 8
				DW 3000			; adresa maskirajuceg potprograma
				
				
; PREKIDNI POTPROGRAM - NEMASKIRAJUCI ###############################

				ORG 0C
				
				PUSH  R0
				PUSH  R1
				MOVE  SR, R0
				PUSH  R0
				
				LOAD  R0, (GPIO1_ISR)		; MOVE 1, R0 ZA SWITCH			; MOVE 2, R0 ZA BUTTON
				STORE R0, (GPIO1_ISR)		; NIKAD NE RADITI MOVE 3 JER TO PROGRAMSKI GENERIRA PREKID NA DRUGOM MJESTU
				AND   R0, 1, R0
				JR_Z  BUTTONS_ACTIVE
				
SWITCH_ACTIVE	LOAD  R0, (SYSTEM_STATUS)
				OR R0, R0, R0
				JR_Z UPALI

UGASI			MOVE 0, R0
				STORE R0, (SYSTEM_STATUS)
				STORE R0, (SYSTEM_ALARM)
				STORE R0, (GPIO0_LEDICE)
				MOVE %B 100, R0
				STORE R0, (GPIO0_RGB)

				MOVE  1, R0 
				STORE R0, (INTC_NMI_IAR)
				
				POP R0
				AND R0, 0F, R0
				MOVE R0, SR
				POP R1
				POP R0
				RETN
				
				
UPALI			LOAD R0, (GPIO2_ISR)
				STORE R0, (GPIO2_ISR)
				
				MOVE 2, R0
				STORE R0, (INTC_MI_IAR)
				
				MOVE -1, R0
				STORE R0, (GPIO2_GIER)

				MOVE 1, R0
				STORE R0, (SYSTEM_STATUS)
				MOVE %B 010, R0
				STORE R0, (GPIO0_RGB)
				
				MOVE  1, R0
				STORE R0, (INTC_NMI_IAR)
				
				POP R0
				OR R0, %B 10000, R0
				MOVE R0, SR
				POP R1
				POP R0
				RETN
				
				
				
BUTTONS_ACTIVE	LOAD  R0, (SYSTEM_STATUS)
				OR    R0, R0, R0
				JR_Z  NMI_END
				
				LOAD R0, (GPIO1_BUTTONS)
				OR R0, R0, R0
				JR_Z NMI_END
	
				LOAD  R0, (SYSTEM_ALARM)	
				OR R0, R0, R0
				JR_Z NMI_END
				
				MOVE -1, R0
				STORE R0, (GPIO2_GIER)
				
				LOAD R0, (GPIO2_ISR)
				STORE R0, (GPIO2_ISR)
				
				MOVE 2, R0
				STORE R0, (INTC_MI_IAR)
				
				MOVE 0, R0
				STORE R0, (GPIO0_LEDICE)
				STORE R0, (SYSTEM_ALARM)


NMI_END			MOVE  1, R0 ; 0001 RADI AKO CISTIMO BUTTON ???
				STORE R0, (INTC_NMI_IAR)	; OBAVEZNO AKNOWLEDGE NA KRAJ!!!

				POP   R0
				MOVE  R0, SR
				POP   R1
				POP   R0
				
				RETN
				
				
; MAIN ##############################################################

MAIN_DUMMY 		MOVE  3, R0
				STORE R0, (INTC_NMI_MER)	; globalno omogucavanje NMI na kontroleru
				STORE R0, (INTC_MI_MER)		; globalno omogucavanje INT na kontroleru
				
				MOVE  %B 1000001, R0		; select NMI 
				STORE R0, (INTC_NMI_SIE)
				
				MOVE  %B 0000010, R0		; select INT
				STORE R0, (INTC_MI_SIE)
				
				MOVE  1, R0
				ROTR  R0, 1, R0
				STORE R0, (GPIO1_GIER)		; globalno omogucavanje prekida na GPIO1
				STORE R0, (GPIO2_GIER)		; globalno omogucavanje prekida na GPIO2
				
				MOVE  %B 11, R0
				STORE R0, (GPIO1_IER)		; omogucavanje prekida na gumbima i switchevima
				
				MOVE  %B 11,R0
				STORE R0, (GPIO2_IER)		; omogucavanje prekida za input port
				
				MOVE  %B 100, R0
				STORE R0, (GPIO0_RGB)		; pocetno stanje sustava - ugaseno
				
				MOVE  %B 00000, SR 			; GIE disable
				
				 
MAIN_LOOP		JR    MAIN_LOOP

				HALT
				
				
				
				
; ####### BLUETOOTH KOD ISJECAK
				
; #######
				

; PREKIDNI POTPROGRAM - MASKIRAJUCI #################################
				
				ORG 3000
				
				PUSH  R0
				PUSH  R1
				PUSH  R2
				PUSH  R3
				PUSH  R4
				MOVE  SR, R0
				PUSH  R0
				
				LOAD  R0, (GPIO2_ISR)		; spusti prekid
				STORE R0, (GPIO2_ISR)
				
				CALL WAIT_DEBOUNCE
				
				LOAD  R0, (GPIO2_INPUT)
				AND   R0, %B 11, R0
				
				JR_Z  KRAJ_INT
				
				
				MOVE 1, R0
				STORE R0, (SYSTEM_ALARM)
				MOVE %B 1111, R0
				STORE R0, (GPIO0_LEDICE)
				MOVE 0, R0
				STORE R0, (GPIO2_GIER)
				
				
KRAJ_INT		MOVE  2, R0				;BILO 2
				STORE R0, (INTC_MI_IAR)
				
				POP   R0
				MOVE  R0, SR
				POP   R4
				POP   R3
				POP   R2
				POP   R1
				POP   R0
				
				RETI
				
				
; POTPROGRAM WAIT_DEBOUNCE ##########################################

WAIT_DEBOUNCE	PUSH  R0
				LOAD  R0, (WAIT_DEBOUNCE_CONST)
WAIT_DEBOUNCE_L	SUB   R0, 1, R0
				JR_NZ WAIT_DEBOUNCE_L
				POP   R0
				RET
				
				
; POTPROGRAM DEBUGGER ###############################################

DEBUGGER		PUSH  R0					; STOGOM PRIMA JEDAN PARAMETAR
				PUSH  R1
				MOVE  SR, R0				; spremanje konteksta i SR
				PUSH  R0
				
				MOVE  0, R0
				STORE R0, (GPIO1_GIER)
				
				LOAD  R0, (SP+10)		; ispitivani podatak nalazi se u R0
				LOAD  R1, (GPIO0_LEDICE)	; pohranjivanje prethodnog stanja ledica
				PUSH  R1
				LOAD  R1, (GPIO0_RGB)	; pohranjivanje prethodnog stanja RGB
				PUSH  R1
				
				MOVE  %B 100001, R1
				STORE R1, (GPIO0_RGB)		; feedback korisniku
				
DEBUG_LOOP		STORE R0, (GPIO0_LEDICE)
				LOAD  R1, (GPIO1_BUTTONS)
				CMP   R1, %B 0001			; BTN0 za prekid debugga
				JR_EQ DEBUG_IZLAZ
				CMP   R1, %B 0010			; BTN1 za shiftanje podatka
				JR_NE DEBUG_REPEAT
DEGUB_SHIFT		SHR   R0, 4, R0				; shiftanje podatka (4 ledice)
DEBUG_REPEAT	CALL  DEBUG_WAIT			; kako bi jedan klik bio stvarno samo jedan klik
				JR    DEBUG_LOOP
				
DEBUG_IZLAZ		MOVE  -1, R0
				STORE R0, (GPIO1_GIER)

				POP   R1					; obnavljanje starog stanja ledica i RGB
				STORE R1, (GPIO0_RGB)	 
				POP   R1
				STORE R1, (GPIO0_LEDICE)
				
				POP   R1					; obnavljanje konteksta i SR
				MOVE  R1, SR
				POP   R1
				POP   R0
				
				RET
				
				
; POTPROGRAM DEBUG_WAIT  ########################

DEBUG_WAIT		PUSH  R0						; spremanje konteksta
				LOAD  R0, (DEBUG_WAIT_TIME)		; vrijeme cekanja
DEBUG_WAIT_LOOP	SUB   R0, 1, R0					; gubitak vremena
				JR_NZ DEBUG_WAIT_LOOP
				POP   R0						; obnavljanje konteksta
				RET
				
				
; PODATCI U MEMORIJI ################################################

DEBUG_WAIT_TIME 		DW %D 100000
		
WAIT_DEBOUNCE_CONST		DW %D 10000

SYSTEM_STATUS 			DW 0

SYSTEM_ALARM			DW 0


